##----- Importation des Modules -----##
from tkinter import *
from random import *

    
def creaboard(n,c):    ##----- Création du caneva -----##
    global board
    board = Canvas(fen, width = n*c+2, height = n*c+2, bg = 'white')
    board.grid(row = 0, column = 0, rowspan=4, padx=3, pady=3)
    edge = board.create_rectangle(2,2,n*c+2,n*c+2)

def mazesize():
    check = 0
    str_n = size_form.get()
    n = int(str_n)
    
    if 4 < n <= 15:
        c = 30
    elif 4 < n <= 30:
        c = 20
    elif 4 < n <= 80:
        c = 10
    else:
        ADD.itemconfigure(scrolltxt, text = 'OUPS ! Il Faut Saisir Un Nombre Entier Entre 5 Et 80')
        warning(0,"red")
        check = 1
    
    if check == 0:
        ADD.itemconfigure(scrolltxt, text = "C'est Parti ! Dirigez-Vous A L'aide Des Fleches")
        warning(0,"spring green")
        
    return n,c
                

def vertiwalls(c,n):
    vertical = []
    for ligne in range(n):         
        for colonne in range(1,n):    
            vertical.append(board.create_line\
                    (c*colonne+2,ligne*c+2,c*colonne+2,ligne*c+2+c ))
    
    return vertical

def horiwalls(c,n):        
    horizontal = []   
    for ligne in range(1,n):         
        for colonne in range(n):    
            horizontal.append(board.create_line\
                    (c*colonne+2,ligne*c+2,c*colonne+2+c,ligne*c+2 ))
    
    return horizontal

def chooseinit(n):
    begin = randint(0,n-1)*n
    return begin

def initmaze(v,h,begin,n,c):    #to be added, choose end cell
    walls = []
    vtiles = []
    walls2 = []
    
    vertif = []
    horif = []
    
    vtiles.append(begin)
    
    walls.append( v[begin-begin//n] ) #adds right wall
    walls2.append(v[begin-begin//n] )
    if begin >= n:
        walls.append( h[begin-n] )    #adds top wall
        walls2.append(h[begin-n] )
    if begin < n*n-n:                       
        walls.append( h[ begin ] )      #adds bottom wall
        walls2.append(h[ begin ] )
    
    initsq = board.create_rectangle(2, (begin//n)*c+3, c+1, (begin//n)*c+c+1, \
                                    outline = 'light pink', fill = 'light pink')
    end = randint(0,n-1)*n
    endsq = board.create_rectangle(n*c-c+3, (end//n)*c+3, n*c+3, (end//n)*c+c+1, \
                                    outline = 'pale green', fill = 'pale green')
    return vtiles,walls,walls2, vertif, horif

def choosewall(w):
    x = randint(0,len(w)-1)
    return x
    

def tileman(vt,w,x,n):                 

    "----------horizontal---------"
        
    if w[x] >= (n*n-n)+2:
        if w[x]-((n*n-n)+2) in vt and w[x]-((n*n-n)+2) +n in vt: #vérifie si deux cases ds vt
            tile = None
                
        elif w[x]-((n*n-n)+2) in vt:      #revérifie si une case ds vt
            board.delete(w[x])            #crée un passage entre deux cases
            tile = w[x]+n-((n*n-n)+2)
            vt.append(tile)               #ajoute l'autre case ds vt
                                
        else:                             #forcement une case déjà visitée.
            board.delete(w[x])
            tile = w[x]-((n*n-n)+2)
            vt.append(tile)
                        
    "----------vertical----------"
        
    if w[x] < (n*n-n)+2:
        if ((w[x]-2) //(n-1))+(w[x]-2) in vt and ((w[x]-2) //(n-1))+(w[x]-2) +1 in vt:
            tile = None
            
        elif ((w[x]-2) //(n-1))+(w[x]-2) in vt:
            board.delete(w[x])
            tile = ((w[x]-2) //(n-1))+(w[x]-2) +1
            vt.append(tile)
            
        else:
            board.delete(w[x])
            tile = ((w[x]-2) //(n-1))+(w[x]-2)
            vt.append(tile)
    
    return tile 
    

def wallman(v,h,w,w2,t,x,n,vertif,horif):

    if t is None:
        if w[x] >= (n*n-n)+2:
            horif.append(w[x])
        else:
            vertif.append(w[x])

    del w[x]
    
    if t is not None:
        if t < n*n-n and h[t] not in w2:    #verifie exception
            w.append(h[t])          #bottom wall
            w2.append(h[t])
        
        if t >= n and h[t-n] not in w2:
            w.append(h[t-n])        #top wall
            w2.append(h[t-n])

        ###--###

        if t%n != 0 and v[t-(t//n)-1] not in w2:
            w.append(v[t-(t//n)-1])  #left wall
            w2.append(v[t-(t//n)-1])

        
        if (t+1)%n != 0 and v[t-(t//n)] not in w2:
            w.append(v[t-(t//n)])    #right wall
            w2.append(v[t-(t//n)])

    return w,w2,vertif,horif

def mazegen():
    n,c = mazesize()
    ADD.configure( height = n*c-80)
    creaboard(n,c)
    v = vertiwalls(c,n)
    h = horiwalls(c,n)
    begin = chooseinit(n)
    vtiles,walls,walls2, vertif, horif = initmaze (v,h,begin,n,c)

    while len(walls) > 0:
        choicew = choosewall(walls)
        tile = tileman(vtiles,walls,choicew,n)
        walls,walls2,vertif,horif= wallman(v,h,walls,walls2,tile,choicew,n,vertif, horif)

def warning(counter,color):
    if counter >= 20:
        ""
    elif counter%2 == 0:
        ADD.itemconfigure(line1, fill=color)
        ADD.itemconfigure(line2, fill=color)
        counter += 1
        fen.after(250, lambda: warning(counter,color))
    elif counter%2 == 1:
        ADD.itemconfigure(line1, fill="black")
        ADD.itemconfigure(line2, fill="black")
        counter += 1
        fen.after(250, lambda: warning(counter,color))    

def moveobj(anim,x,y):
    d = 1
    XO = x-d
    if XO < -200:
        XO += 500
    ADD.coords(anim,XO,y )                                                                   
    fen.after(20, lambda: moveobj(anim,XO,y))

def ADDroll():
    global scrolltxt
    
    ADD.create_text(100, 10, text='- - - - - - - -', \
                       fill='black', font='System 30')
    scrolltxt = ADD.create_text(300, 30, text='Entrer La Taille Du Labyrinthe Ou La Commande', \
                       fill='black', font='System 10')
    ADD.create_text(100, 50, text='- - - - - - - -', \
                       fill='black', font='System 30')
    moveobj(scrolltxt,300,30)

def moveright(vertif):
    ""
    #x coord += 1
    #check line
    #check walls in line + coords
    #for x in range (len(walls in line))
        #if x = (xcoord of wall)
            #don't move
        #else:
            #move
            #column += 1
    
        
def fengen():
    global fen
    global size_form
    global ADD
    fen = Tk()
    fen.title('Maze')
    
    bouton_gen = Button(fen, text = "Generate", command = mazegen)
    bouton_gen.grid(row = 0, column = 1, sticky=W+E, padx=3, pady=3)

    size_form = Entry(fen, textvariable=StringVar())
    size_form.grid(row = 1, column = 1, sticky=W+E, padx=3, pady=3)

    ADD = Canvas(fen, width = 125, height = 200, bg = 'white')
    ADD.grid(row = 2, column = 1, padx=3, pady=3)
    ADDroll()

    bouton_quitter = Button(fen, text='Quitter', command=fen.destroy)
    bouton_quitter.grid(row = 3, column = 1, sticky=W+E, padx=3, pady=3)


    fen.mainloop()




##----- Programme principal -----##

fengen()

